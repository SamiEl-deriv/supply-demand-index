use 5.006;
use strict;
use warnings;
use Moose;
use Math::CDF qw(pnorm);
use Math::BivariateCDF;
use Math::Business::BlackScholesMerton::Binaries;
use feature 'say';

sub bivariate {
    my ($x, $y, $rho) = @_;

    return (pnorm($x) - ((1 - pnorm($y)) - Math::BivariateCDF::bivnor($x, $y, $rho)));
}

# input bivariate variables and probabilities from python here in format (x, y, rho, prob) for each row
my $input_string = "-0.004298188233318906 -0.003039278046596025 0.7071067811865476 0.3735371258798143
0.0034349694919982776 0.0024288902209608923 0.7071067811865476 0.37617013842612546
0.007338874687881252 0.005189368058079141 0.7071067811865476 0.37750114804431956
0.0049756828768847605 0.0035183391032790035 0.7071067811865476 0.37669529176845074
-0.0020386183095106713 -0.0014415208309060516 0.7071067811865476 0.3743059784193189
0.0018202136678982643 0.001287085427779301 0.7071067811865476 0.3756199480492668
0.002096609146634004 0.0014825265450826447 0.7071067811865476 0.37571410876463796
-0.0010633213392108266 -0.0007518817295363368 0.7071067811865476 0.37463796441549724
-0.0015295712110922233 -0.0010815701756710311 0.7071067811865476 0.37447924590060544
0.007526589093274286 0.0053221021870589556 0.7071067811865476 0.37756517790571287
0.006305876556644666 0.00445892807452872 0.7071067811865476 0.37714883872241356
-0.003634297633964154 -0.002569836501826278 0.7071067811865476 0.37376298198324304
-0.001534583826414923 -0.0010851146299571918 0.7071067811865476 0.37447753962489405
-0.0002985037947403324 -0.00021107405747080628 0.7071067811865476 0.3748983574713513
0.0005073502108289787 0.00035875077451359537 0.7071067811865476 0.37517277238698743
0.001922027774541402 0.001359078873007114 0.7071067811865476 0.37565463275168753
0.0006582661372561581 0.0004654644494793041 0.7071067811865476 0.3752241690496064
0.0020097349959464837 0.0014210972440216773 0.7071067811865476 0.37568451236144684
-0.0004196997670595164 -0.0002967725513501984 0.7071067811865476 0.37485709146175317
-0.0017595919719965662 -0.0012442194155201816 0.7071067811865476 0.3744009497551228
0.004661452022371858 0.003296144335194887 0.7071067811865476 0.3765881708324599
0.0005124805870523587 0.0003623784983311857 0.7071067811865476 0.3751745195831877
0.004485019935764044 0.00317138801033561 0.7071067811865476 0.3765280287269337
0.00010151690694028997 7.178329330256273e-05 0.7071067811865476 0.37503456879854247
-0.0014181306228519008 -0.0010027697800268811 0.7071067811865476 0.37451718038354204
0.0041988860835908744 0.002969060823136932 0.7071067811865476 0.3764304967101345
-0.0017213029043381654 -0.0012171449561336157 0.7071067811865476 0.3744139825736858
-0.00494421650279233 -0.0034960890167788933 0.7071067811865476 0.3733173807157686
-0.007464188135053562 -0.005277978046348544 0.7071067811865476 0.37246054106959914
-0.004004960002707601 -0.0028319343762954383 0.7071067811865476 0.373636877971317
-0.0006542799032377671 -0.0004626457563735033 0.7071067811865476 0.37477722261060953
-0.0016800794481377345 -0.0011879955707103445 0.7071067811865476 0.3744280143295055
-0.001817216980937949 -0.0012849664501085687 0.7071067811865476 0.3743813355973119
-0.0014840296986153613 -0.0010493674633731502 0.7071067811865476 0.3744947481550468
-0.0011945462064187414 -0.0008446717229993574 0.7071067811865476 0.37459329172735495
-0.0013648993659043768 -0.0009651295972682035 0.7071067811865476 0.37453530070484975
0.0026064962943617553 0.0018430712048808045 0.7071067811865476 0.375887829822946
-0.004013548844570403 -0.0028380076046191642 0.7071067811865476 0.37363395607032046
-0.004302336063701072 -0.0030422110055864657 0.7071067811865476 0.37353571489643456
0.000906356330909318 0.0006408907077573372 0.7071067811865476 0.37530866378318845
0.001817216980937949 0.0012849664501085687 0.7071067811865476 0.3756189271894418
0.0027356006485173313 0.0019343617691849218 0.7071067811865476 0.3759318195660035
-0.00416166937768156 -0.0029427446380150303 0.7071067811865476 0.3735835667979738
-0.0013422043648705759 -0.0009490818081381672 0.7071067811865476 0.3745430263232372
-0.0018366080480801989 -0.0012986780051792975 0.7071067811865476 0.3743747354073436
0.004186241121343513 0.0029601194845839747 0.7071067811865476 0.376426186677347
0.0005286232513396715 0.0003737930857151624 0.7071067811865476 0.3751800171277057
0.0029750622997625257 0.0021036867266145272 0.7071067811865476 0.37601341484356615
0.003056874110135324 0.0021615364125102806 0.7071067811865476 0.3760412928160331
-0.00023973735205548032 -0.00016951990734213684 0.7071067811865476 0.3749183672752703";

my @numbers = split(/\s+/, $input_string);
my $len = (scalar @numbers) / 4 - 1;
my @arrays;

for my $i (0 .. $len) {
    push @{$arrays[$i]}, @numbers[$i * 4 .. ($i + 1) * 4 - 1];
}
my $pass_fail = 'pass';
foreach my $i (0 .. $len) {
    # say $i;
    my @a = @{$arrays[$i]};
    my $biv = bivariate ($a[0],$a[1],$a[2]);
    if (sprintf("%.10f",bivariate ($a[0],$a[1],$a[2])) != sprintf("%.10f",$a[3])) {
      $pass_fail = 'fail';
    }
}
$len += 1;
if ($pass_fail eq 'pass') {
  say "$len test cases $pass_fail";
}
else {
  say "fail cases occured"
}